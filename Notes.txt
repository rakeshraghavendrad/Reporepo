from typing import Optional, List, Type, Union
from deepeval.utils import get_or_create_event_loop, prettify_list
from deepeval.metrics.utils import (
    construct_verbose_logs,
    check_llm_test_case_params,
    initialize_model,
)
from deepeval.test_case import (
    LLMTestCase,
    LLMTestCaseParams,
)
from deepeval.metrics import BaseMetric
from deepeval.models import DeepEvalBaseLLM
from deepeval.metrics.contextual_precision.template import ContextualPrecisionTemplate
from deepeval.metrics.indicator import metric_progress_indicator
from deepeval.metrics.contextual_precision.schema import ContextualPrecisionScore


class ContextualPrecisionMetric(BaseMetric):
    _required_params: List[LLMTestCaseParams] = [
        LLMTestCaseParams.INPUT,
        LLMTestCaseParams.ACTUAL_OUTPUT,
        LLMTestCaseParams.RETRIEVAL_CONTEXT,
        LLMTestCaseParams.EXPECTED_OUTPUT,
    ]

    def __init__(
        self,
        threshold: float = 0.5,
        model: Optional[Union[str, DeepEvalBaseLLM]] = None,
        async_mode: bool = True,
        verbose_mode: bool = False,
        evaluation_template: Type[
            ContextualPrecisionTemplate
        ] = ContextualPrecisionTemplate,
    ):
        self.threshold = threshold
        self.model, self.using_native_model = initialize_model(model)
        self.evaluation_model = self.model.get_model_name()
        self.async_mode = async_mode
        self.verbose_mode = verbose_mode
        self.evaluation_template = evaluation_template
        self.score = 0.0
        self.reason = None

    def measure(
        self,
        test_case: LLMTestCase,
        _show_indicator: bool = True,
        _in_component: bool = False,
    ) -> float:

        check_llm_test_case_params(test_case, self._required_params, self)

        self.evaluation_cost = 0 if self.using_native_model else None
        with metric_progress_indicator(
            self, _show_indicator=_show_indicator, _in_component=_in_component
        ):
            if self.async_mode:
                loop = get_or_create_event_loop()
                loop.run_until_complete(
                    self.a_measure(
                        test_case,
                        _show_indicator=False,
                        _in_component=_in_component,
                    )
                )
            else:
                self._generate_score_and_reason(
                    test_case.input,
                    test_case.expected_output,
                    test_case.retrieval_context,
                )

            # Determine success based on threshold
            self.success = self.score >= self.threshold

            # Build verbose logs
            self.verbose_logs = construct_verbose_logs(
                self,
                steps=[
                    f"Score: {self.score}\nReason: {self.reason}",
                ],
            )

            return self.score

    async def a_measure(
        self,
        test_case: LLMTestCase,
        _show_indicator: bool = True,
        _in_component: bool = False,
    ) -> float:

        check_llm_test_case_params(test_case, self._required_params, self)

        self.evaluation_cost = 0 if self.using_native_model else None
        with metric_progress_indicator(
            self,
            async_mode=True,
            _show_indicator=_show_indicator,
            _in_component=_in_component,
        ):
            await self._a_generate_score_and_reason(
                test_case.input,
                test_case.expected_output,
                test_case.retrieval_context,
            )

            self.success = self.score >= self.threshold

            self.verbose_logs = construct_verbose_logs(
                self,
                steps=[
                    f"Score: {self.score}\nReason: {self.reason}",
                ],
            )

            return self.score

    async def _a_generate_score_and_reason(
        self, input: str, expected_output: str, retrieval_context: List[str]
    ):
        prompt = self.evaluation_template.generate_score_and_reason(
            input=input,
            expected_output=expected_output,
            retrieval_context=retrieval_context,
        )

        res: ContextualPrecisionScore = await self.model.a_generate(
            prompt, schema=ContextualPrecisionScore
        )
        self.score = res.score
        self.reason = res.reason
        return self.score

    def _generate_score_and_reason(
        self, input: str, expected_output: str, retrieval_context: List[str]
    ):
        prompt = self.evaluation_template.generate_score_and_reason(
            input=input,
            expected_output=expected_output,
            retrieval_context=retrieval_context,
        )

        res: ContextualPrecisionScore = self.model.generate(
            prompt, schema=ContextualPrecisionScore
        )
        self.score = res.score
        self.reason = res.reason
        return self.score

    def is_successful(self) -> bool:
        if self.error is not None:
            self.success = False
        else:
            try:
                self.success = self.score >= self.threshold
            except:
                self.success = False
        return self.success

    @property
    def __name__(self):
        return "Contextual Precision"
