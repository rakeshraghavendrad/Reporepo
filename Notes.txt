import ast

target_keyword = 'Generated summary of compelling evidence'
keyword_column = 'keyword'
input_column = 'input'

mask = df[keyword_column].str.contains(target_keyword, case=False, na=False)
filtered_rows = df[mask]
unique_claims = df['claim_data'].unique()

for claim in unique_claims:
    matching_row = filtered_rows[filtered_rows['claim_data'] == claim]

    if not matching_row.empty:
        input_json_string = matching_row.iloc[0][input_column]
        print("Found matching input:")
        
        # Safely parse JSON-like string
        parsed_json = ast.literal_eval(input_json_string)
        
        # Extract only 'user' role contents
        user_contents = [item['content'] for item in parsed_json if item.get('role') == 'user']

        # Assign only if enough contents
        user_content_1 = user_contents[0] if len(user_contents) > 0 else ''
        user_content_2 = user_contents[1] if len(user_contents) > 1 else ''
        user_content_3 = user_contents[2] if len(user_contents) > 2 else ''

        # Safe concatenation (skip empty strings)
        overall = "\n\n".join(filter(None, [user_content_1, user_content_2, user_content_3]))

        # Update original dataframe
        df.loc[df[keyword_column] == target_keyword, input_column] = overall
