import pandas as pd
import asyncio
from ragas.dataset_schema import SingleTurnSample
from ragas.metrics import SemanticSimilarity
from ragas.embeddings import LangchainEmbeddingsWrapper

# Your evaluator embedding (already defined)
# evaluator_embedding = ... (you need to define or import this)

# Example DataFrame
df = pd.DataFrame({
    "run1": [
        "The Eiffel Tower is located in Paris.",
        "Mount Everest is the tallest mountain in the world."
    ],
    "run2": [
        "The Eiffel Tower is located in Paris. It has a height of 1000ft.",
        "Mount Everest is the highest mountain with a height of 8848m."
    ]
})

# Setup the scorer
scorer = SemanticSimilarity(embeddings=LangchainEmbeddingsWrapper(evaluator_embedding))

# Async function to process a single row
async def score_row(response, reference):
    sample = SingleTurnSample(response=response, reference=reference)
    return await scorer.single_turn_ascore(sample)

# Wrapper to score all rows
async def compute_semantic_similarity(df):
    tasks = [score_row(row["run1"], row["run2"]) for _, row in df.iterrows()]
    scores = await asyncio.gather(*tasks)
    df["ragas_semanticsimilarity"] = scores
    return df

# Run the async task and get the final DataFrame
df_result = asyncio.run(compute_semantic_similarity(df))

print(df_result)
