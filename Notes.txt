@staticmethod
def generate_score_and_reason(input: str, expected_output: str, retrieval_context: List[str]):
    document_count_str = f" ({len(retrieval_context)} document{'s' if len(retrieval_context) > 1 else ''})"
    return f"""Given the input, expected output, and retrieval context, return JSON with two keys:
- `score`: A float between 0 and 1 indicating contextual precision.
- `reason`: A concise explanation for why this score was given.

Input:
{input}

Expected Output:
{expected_output}

Retrieval Context{document_count_str}:
{retrieval_context}

Example JSON:
{{
  "score": 0.83,
  "reason": "Most nodes were relevant and ranked high, except the third one which was unrelated."
}}

JSON:
"""
