from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import cross_val_score
import numpy as np

# Encode target
y = LabelEncoder().fit_transform(df['decision_SME'])

def column_importance(text_series, y):
    """Return cross-validated accuracy score for one text column"""
    vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
    X = vectorizer.fit_transform(text_series.astype(str))
    
    clf = LogisticRegression(penalty="l2", solver="liblinear")
    scores = cross_val_score(clf, X, y, cv=5, scoring="accuracy")
    return np.mean(scores)

# Check importance for each text column
results = {}
for col in ["initial_prompt", "merchant_document", "reason"]:
    results[col] = column_importance(df[col], y)

# Convert to DataFrame for ranking
col_importance_df = pd.DataFrame.from_dict(results, orient="index", columns=["importance_score"])
col_importance_df = col_importance_df.sort_values(by="importance_score", ascending=False)

print("Column importance wrt SME decision:")
print(col_importance_df)



df[['initial_prompt','merchant_document','reason']].apply(lambda col: col.str.len()).corr()
