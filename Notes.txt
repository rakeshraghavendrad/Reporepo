import pandas as pd
import ast

# Get unique claim_data values
unique_claims = df['claim_data'].unique()

# Loop through each claim_data
for claim in unique_claims:
    # Filter all rows for this claim
    claim_rows = df[df['claim_data'] == claim]

    # Loop through each row for this claim
    for idx, row in claim_rows.iterrows():
        input_raw = row['input']
        keyword = row['keyword']

        try:
            # Try to parse the input as a list of dicts
            parsed_json = ast.literal_eval(input_raw)

            # Check if it's a list of messages with 'role' and 'content'
            if isinstance(parsed_json, list) and all(isinstance(item, dict) for item in parsed_json):
                user_contents = [item['content'] for item in parsed_json if item.get('role') == 'user']

                # Extract up to 3 user contents
                user_content_1 = user_contents[0] if len(user_contents) > 0 else None
                user_content_2 = user_contents[1] if len(user_contents) > 1 else None
                user_content_3 = user_contents[2] if len(user_contents) > 2 else None

                # Build the overall formatted string
                overall = ""
                if user_content_1:
                    overall += "1. " + user_content_1
                if user_content_2:
                    overall += "\n2. " + user_content_2
                if user_content_3:
                    overall += "\n3. " + user_content_3

                # Update the input in the DataFrame
                df.at[idx, 'input'] = overall

        except Exception as e:
            # If input is not JSON-parsable, skip
            print(f"Skipping row {idx} for claim {claim}: {e}")
