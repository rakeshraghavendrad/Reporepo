import ast
import pandas as pd

# 1. Get all unique claims
unique_claims = df['claim_data'].unique()

# 2. Keyword to filter by
target_keyword = 'Generated summary of compelling evidence'
keyword_column = 'keyword'
input_column = 'input'

# 3. Filter rows by keyword
mask = df[keyword_column].str.contains(target_keyword, case=False, na=False)
filtered_rows = df[mask]

# 4. Create new column to store cleaned text
df['defined_input'] = None

# 5. Loop through each claim
for claim in unique_claims:
    matching_row = filtered_rows[filtered_rows['claim_data'] == claim]

    if not matching_row.empty:
        row_index = matching_row.index[0]  # get exact row index in original df
        input_json_string = matching_row.iloc[0][input_column]

        try:
            # Safely parse the JSON-like string
            parsed_json = ast.literal_eval(input_json_string)

            # Get only 'user' role messages
            user_contents = [item['content'] for item in parsed_json if item.get('role') == 'user']

            # Format with 1., 2., 3.
            formatted = ""
            for i, content in enumerate(user_contents[:3]):
                formatted += f"{i+1}. {content}\n"

            # Assign to new column
            df.at[row_index, 'defined_input'] = formatted.strip()

        except Exception as e:
            print(f"Error parsing row {row_index}: {e}")
            df.at[row_index, 'defined_input'] = "Invalid JSON"

# âœ… Done: Your cleaned output is now in df['defined_input']
