The actual JSON is valid, but the surrounding text:
1. Starts with `Exception in threading.excepthook:`
2. Contains fenced code block markers (```````json` and ``````)
3. Has stray newlines and dots afterward.

`strip()` can’t handle that because:
- It only removes characters from the start/end, not whole substrings.
- The extra message at the top (`Exception in threading.excepthook:`) breaks the JSON completely.

---

### Here’s a **working cleaning function** for your case:

```python
import re, json

def clean_json_response(response_text):
    # Remove any leading exception text
    response_text = re.sub(r'^.*?(\{)', r'\1', response_text, flags=re.S)  # Keep only from first '{'
    
    # Remove markdown code fences (``` or ```json)
    response_text = re.sub(r'```(?:json)?', '', response_text).strip()
    
    # Remove any trailing dots or weird newlines
    response_text = re.sub(r'\.+$', '', response_text).strip()

    return json.loads(response_text)

# Usage
try:
    json_result = clean_json_response(response_text)
except Exception as e:
    print("Failed to parse JSON:", e)
    print("Raw output:", response_text)
